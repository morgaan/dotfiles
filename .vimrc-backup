" VARIABLES
" =========

" Plugins variables
" -----------------

" limelight.vim
let g:limelight_conceal_ctermfg = 'darkgray'

" calendar-vim settings
let g:calendar_diary='~/notebook/diary'





" PLUGINS
" =======

" UI/UX Extensions
" ----------------
Plug 'junegunn/goyo.vim', {
      \ 'for': ['md', 'markdown']
      \ }                                         " Distraction-free writing.
Plug 'junegunn/limelight.vim'                     " Hyperfocus-writing.

" Extensions
" ----------


" Applications
" ------------
Plug 'mattn/calendar-vim'


call plug#end()





" FUNCTIONS
" =========

" Lines swapped get indent
function! UnimpairedMove(direction)
  execute "norm \<Plug>unimpairedMove" . a:direction
  norm! ==
endfunction

function! HlSearch()
    let s:pos = match(getline('.'), @/, col('.') - 1) + 1
    if s:pos != col('.')
        call StopHL()
    endif
endfunction

function! StopHL()
    if !v:hlsearch || mode() isnot 'n'
        return
    else
        sil call feedkeys("\<Plug>(StopHL)", 'm')
    endif
endfunction



" SETTINGS
" ========

" CoC settings
" ------------

" Better display for messages
set cmdheight=2
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes





" MAPPINGS
" ========

" Turn off `hlsearch` with <Space>/ until next search
" nnoremap <Leader>/ :silent! nohls<cr>
noremap <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]














" AUTOCOMMANDS
" ============

autocmd FileType markdown syntax sync fromstart   " Force a full file syntax computation when opening Markdown files.
" autocmd FileType dustjs set textwidth=0           " Disable textwidth for dust template
"
" Align GitHub-flavored Markdown tables
autocmd FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

autocmd FileType html,hbs,liquid,njk,dust,scss,css,mustache,javascript EmmetInstall

" Create file when if it does not exist for scss files
autocmd! FileType scss nnoremap <silent> <buffer> <leader>gf :exe 'e '.expand('%:h').'/_'.expand('<cfile>').'.scss'<CR>

" Automatically equalize splits when Vim is resized.
autocmd VimResized * wincmd =


autocmd BufNewFile,BufRead *.md setlocal filetype=markdown         " Markdown also starts with .md
autocmd BufNewFile,BufRead *.md setlocal textwidth=80         " Force the cursor onto a new line after 80 characters.
autocmd BufNewFile,BufRead *.hbs,*.mustache setlocal filetype=html " Handlebars/mustache template to be considered as html


" CoC autocommands
 
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup SearchHighlight
au!
    au CursorMoved * call HlSearch()
    au InsertEnter * call StopHL()
augroup end




" COMMANDS
" ========

" CoC commands
"
" Use `:Format` to format current buffer
" command! -nargs=0 Format :call CocAction('format')

" use `:OR` for organize import of current buffer
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" command! -nargs=0 Prettier :CocCommand prettier.formatFile

