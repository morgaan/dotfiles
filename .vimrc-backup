" VARIABLES
" =========
    
let &statusline = s:statusline_expr()

" Plugins variables
" -----------------

" Not sure this is working, but leave it here for reference.
" Implemented coc extensions:
" https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-html', 
  \ 'coc-css', 
  \ 'coc-json', 
  \ 'coc-prettier', 
  \ ]

" markdown-preview
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1

" ack.vim
let g:ackhighlight = 1

" emmet-vim
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-E>'

" limelight.vim
let g:limelight_conceal_ctermfg = 'darkgray'

" vimwiki
let g:vimwiki_list = [{'path': '~/notebook/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_global_ext = 0  " Fix this https://github.com/vimwiki/vimwiki/issues/95

" calendar-vim settings
let g:calendar_diary='~/notebook/diary'

" hardtime
let g:hardtime_default_on = 1
let g:hardtime_timeout = 1000
let g:hardtime_ignore_quickfix = 1





" PLUGINS
" =======

" Language support/syntax highlighting
" ------------------------------------

Plug 'neoclide/coc.nvim', {'branch': 'release'}



" Buffer management
" -----------------
Plug 'arithran/vim-delete-hidden-buffers' " Clear any unused buffers that are hidden.
Plug 'tpope/vim-eunuch' " Vim sugar for the UNIX shell commands that need it the most.


" UI/UX Extensions
" ----------------
Plug 'junegunn/goyo.vim', {
      \ 'for': ['md', 'markdown']
      \ }                                         " Distraction-free writing.
Plug 'junegunn/limelight.vim'                     " Hyperfocus-writing.
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & npm install'  } " Preview markdown as you type
Plug 'mattn/emmet-vim'                            " Greatly improves HTML & CSS workflow

" Extensions
" ----------
Plug 'vim-scripts/matchit.zip'         " Extends `%` operator.
Plug 'tpope/vim-commentary'            " Comment stuff out (gcc for a line, gc with motion e.g. gcap).
Plug 'tpope/vim-surround'              " quoting/parenthesizing made simple (e.g. ysaw', cs'`).
Plug 'tpope/vim-unimpaired'            " Pairs of handy bracket mappings.
Plug 'tpope/vim-repeat'                " Enable repeating supported plugin maps with `.`
Plug 'vim-scripts/ReplaceWithRegister' " (e.g. grap+)
Plug 'junegunn/vim-easy-align'         " Simple, easy-to-use Vim alignment plugin.


" Applications
" ------------
Plug 'vimwiki/vimwiki'
Plug 'mattn/calendar-vim'


call plug#end()





" FUNCTIONS
" =========

" Status line (inspired from " https://github.com/junegunn/dotfiles/blob/master/vimrc)
function! s:statusline_expr()
  let winNumber = '[w%{winnr()}|b%n]'
  let currentFile = '%f%'
  let isModified = "<%{&modified ? '[Unsaved] ' : !&modifiable ? '[RO] ' : '[Saved]'}"
  let gitBranch = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let seperator = ' %= '
  let fileType  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let cursorPosition = '%-12(%l:%c%V%)'
  let percentageThrough = '|%P'
  " Add status line support, for integration with other plugin, checkout `:h coc-status`
  let cocStatus = "%{coc#status()}%{get(b:,'coc_current_function','')}"

  return winNumber.currentFile.isModified.gitBranch.seperator.fileType.cursorPosition.percentageThrough.seperator.cocStatus
endfunction


" CoC functions
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Lines swapped get indent
function! UnimpairedMove(direction)
  execute "norm \<Plug>unimpairedMove" . a:direction
  norm! ==
endfunction

function! HlSearch()
    let s:pos = match(getline('.'), @/, col('.') - 1) + 1
    if s:pos != col('.')
        call StopHL()
    endif
endfunction

function! StopHL()
    if !v:hlsearch || mode() isnot 'n'
        return
    else
        sil call feedkeys("\<Plug>(StopHL)", 'm')
    endif
endfunction



" SETTINGS
" ========

set updatetime=250             " Write swapfiles to disk a little sooner

" Text rendering
" ----------------------

set showmatch                              " Show matching parens, brackets, etc.
syntax enable                              " Enable syntax highlighting.

" Omni completion is not usually enabled by default. These 2 lines turn it on.
filetype plugin on
set omnifunc=syntaxcomplete#Complete


" Search
" ------

set incsearch  " Find the next match as I type the seach.
set hlsearch   " Highlight searches by default.
set ignorecase " Ignore case when search...
set smartcase  " ... unless I type a capital letter in search term.


" Swap and backup file options
" ----------------------------

set directory=$HOME/.vim-directory// " Move swap files out of the editing folder.
set nobackup                         " No backup mechanism...
set nowritebackup                    " ...what so ever

" External changes tracking
" -------------------------

" Track change on file outside of Vim.
" Do not update changed buffer unless
" - Invoking the shell via command
" - Calling :checktime
set autoread 

" CoC settings
" ------------

" Better display for messages
set cmdheight=2
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes




















" HIGHLIGHTS
" ==========

" Italicised comments...
highlight Comment cterm=italic gui=italic guifg=#5f87df
" ... and attributes
highlight htmlArg cterm=italic gui=italic guifg=#af8700





" MAPPINGS
" ========

" Close all hidden/all buffers.
nnoremap <leader>dhb :DeleteHiddenBuffers<CR>
nnoremap <leader>dab :%bd<CR>

" Swap booleans.
nnoremap <leader>1 :s/false/true/<CR>
nnoremap <leader>0 :s/true/false/<CR>

" Shortcut to rapidly toggle `set list`.
nmap <leader>l :set list!<CR>

" Copy current file path to clipboard.
nnoremap gcp :let @+=@%<CR>

" Open folder container active buffer in file explorer (netrw).
" Resetting winfixwidth make <C-W> = works again!
nnoremap <silent> -- :Lex %:p:h<CR>:set winfixwidth!<CR>

" Toggle conceallevel (useful to toggle for URL on vimwiki files)
nnoremap <Leader>c :let &cole=(&cole == 2) ? 0 : 2 <bar> echo 'conceallevel ' . &cole <CR>

" Forgiving :Qall to :qall
cmap Qa qa

inoremap if( if (

" Add space before/after cursor in normal mode
nnoremap [s i<Space><Esc>l
nnoremap ]s a<Space><Esc>h

" Lines swapped get indent
nmap ]e :call UnimpairedMove('Down')<CR>
nmap [e :call UnimpairedMove('Up')<CR>

" Add explicit tab in insert mode
inoremap <Leader><Tab> <C-V><Tab>

" Make `n`/`N` bring next search result to middle line
nnoremap n nzz
nnoremap N Nzz

" Jump Up / Jump down and places line in middle of screen
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nmap ]q :cn<CR>zz
nmap [q :cN<CR>zz

" Move visual selection
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv




" Plugins mappings
" ----------------

" vim-easy-align settings
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

nmap <Leader>wb :VimwikiGoBackLink<CR>


" CoC mappings

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
 
" Remap for rename current word (local file scope rename)
" nmap <leader>rn <Plug>(coc-rename)

" Remap for project wide rename of current word
" nnoremap <leader>pr :CocSearch <C-R>=expand('<cword>')<CR><CR>

" Fix autofix problem of current line
" nmap <leader>qf  <Plug>(coc-fix-current)



" Turn off `hlsearch` with <Space>/ until next search
" nnoremap <Leader>/ :silent! nohls<cr>
noremap <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]














" AUTOCOMMANDS
" ============

autocmd FileType gitcommit set textwidth=72 " However, in Git commit messages, let's make it 72 characters.

" More contrasted hightlight colors for current line, current cursor and
" colorcolumn
autocmd ColorScheme * hi CursorLineNr ctermbg=magenta ctermfg=white guibg=magenta guifg=white
autocmd ColorScheme * hi Cursor ctermbg=yellow ctermfg=black guibg=yellow guifg=black
autocmd ColorScheme * hi ColorColumn ctermbg=darkgrey guibg=#073642
" Ensure that italics carry over if I ever switch light/dark scheme
autocmd ColorScheme * highlight! Comment cterm=italic gui=italic
autocmd ColorScheme * highlight! htmlArg cterm=italic gui=italic

" Automatically equalize splits when Vim is resized.
autocmd VimResized * wincmd =

autocmd FileType markdown syntax sync fromstart   " Force a full file syntax computation when opening Markdown files.
" autocmd FileType dustjs set textwidth=0           " Disable textwidth for dust template
" Align GitHub-flavored Markdown tables
autocmd FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

autocmd BufNewFile,BufRead *.md set filetype=markdown         " Markdown also starts with .md
autocmd BufNewFile,BufRead *.md setlocal textwidth=80         " Force the cursor onto a new line after 80 characters.
autocmd BufNewFile,BufRead *.hbs,*.mustache set filetype=html " Handlebars/mustache template to be considered as html

" Call checktime
" - *once* after 'updatetime' (250ms) without doing anything
" - and then when hitting a key after the hold
"
" https://gist.github.com/j-manu/840172
" https://www.reddit.com/r/vim/comments/29iq9s/vim_detecting_changes_on_disk/
autocmd CursorHold,CursorHoldI * checktime

" Give feedback that file has change.
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

autocmd FileType html,hbs,liquid,njk,dust,scss,css,mustache,javascript EmmetInstall

" CoC autocommands
 
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

augroup SearchHighlight
au!
    au CursorMoved * call HlSearch()
    au InsertEnter * call StopHL()
augroup end

" Ease help browsing by adding Find next/previous subject
" autocmd! FileType help nnoremap <silent> <buffer> <Tab> /\|\zs\S\+\ze\|<CR>:set nohlsearch<CR>
" autocmd! FileType help nnoremap <silent> <buffer> <S-Tab> ?\|\zs\S\+\ze\|<CR>:set nohlsearch<CR>

" Create file when if it does not exist for scss files
autocmd! FileType scss nnoremap <silent> <buffer> <leader>gf :exe 'e '.expand('%:h').'/_'.expand('<cfile>').'.scss'<CR>





" COMMANDS
" ========

" fzf commands
"
" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)
" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)



command! -nargs=0 Prettier :CocCommand prettier.formatFile

" CoC commands
"
" Use `:Format` to format current buffer
" command! -nargs=0 Format :call CocAction('format')

" use `:OR` for organize import of current buffer
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
