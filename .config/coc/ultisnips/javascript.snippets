# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# Vanilla
# -------
snippet cl "Console.log" b
console.log($0);
endsnippet

snippet cl' "Console.log" b
console.log('$0');
endsnippet

snippet cl` "Console.log" b
console.log(`$0`);
endsnippet

snippet $ "querySelector" b
${1:document}.querySelector('${0:selector}');
endsnippet

snippet $$ "querySelectorAll" b
${1:document}.querySelectorAll('${0:selector}');
endsnippet





# JSDOC
# -----
snippet /** "Function jsdoc" b
/**
 * ${1:description}
 * $0
 */
endsnippet

snippet @par "Jsdoc param"
@param {${1:type}} ${2:name} - ${0:description}
endsnippet

snippet @ret
@returns {${1:type}} ${0:description}
endsnippet




# JEST
# ----
snippet jdes "Describe (jest)"
describe('${1:description}', () => {
	$0
});
endsnippet

snippet jit "it (jest)"
it('${1:description}', () => {
	$0
});
endsnippet

snippet jbefe "before each (jest)"
beforeEach(() => {
	$0
});
endsnippet

snippet jafte "after each (jest)"
afterEach(() => {
	$0
});
endsnippet

snippet jbefa "before all (jest)"
beforeAll(() => {
	$0
});
endsnippet

snippet jafta "after all (jest)"
afterAll(() => {
	$0
});
endsnippet
